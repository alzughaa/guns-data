guns_data <- read.csv("full_data.csv", header = TRUE, sep = ",")
guns_data <- read.csv("full_data.csv", header = TRUE, sep = ",")
getwd()
guns_data <- read.csv("full_data.csv", header = TRUE, sep = ",")
install.packages(c("cli", "crayon", "ggfittext", "rappdirs"))
# This is a scalar. This is also a vector of length 1.
my_scalar <- 13
# This is combining scalars to create a vector with length > 1.
my_vector <- c(13, 52, 44, 60, 29, 48, 57)
# This is to create a numerical sequence.
my_sequential_vector <- 10:17
# This is to create a more complex sequence.
my_next_sequential_vector <- seq(2, 6, by = 0.1)
length(my_scalar)
my_next_sequential_vector
install.packages("systemfonts")
n <- 100
n <- 100
Vector_A <- rnorm(n, 50, 10)
Chosen_ones <- Vector_A[1, 3, 8]
Chosen_ones <- Vector_A[c(1, 3, 8)]
Vector_C <- Vector_A[c(-10, -15)]
Vector_D <- Vector_A < 40
Vector_D
Vector_D <- c(Vector_A < 40)
Vector_D
Vector_D <- c(Vector_A  > 40)
Vector_D
print(Vector_D)
Lengh_Vector_D <- length(Vector_D)
Lenght_Vector_D <- length(Vector_D)
Lenght_Vector_D
sum(Vector_A > 0)
sum(Vector_A >0)
min_max <- range(Vector_A)
min_max
Vector_E <- sort(Vector_A)
Vector_D
Vector_D <- list(Vector_A  > 40)
View(Vector_D)
Vector_D <- c(Vector_A  > 40)
Vector_D
Vector_D <- c(Vector_A < 40)
Vector_D
Lenght_Vector_D <- length(Vector_D)
Lenght_Vector_D
Vector_A[4]
Vector_A[2]
Lenght_Vector_D <- length(Vector_D)
Lenght_Vector_D <- length(Vector_D)
min_max_A <- range(Vector_A)
positive_Vector_A <- Vector_A[Vector_A >0]
positive_Vector_A
Vector_D <- Vector_A[Vector_A < 40]
n <- 100
Vector_A <- rnorm(n, 50, 10)
Vector_B <- Vector_A[c(1, 3, 8)]
Vector_C <- Vector_A[c(-10, -15)]
Vector_D <- Vector_A[Vector_A < 40]
Lenght_Vector_D <- length(Vector_D)
positive_Vector_A <- Vector_A[Vector_A >0]
min_max_A <- range(Vector_A)
Vector_E <- sort(Vector_A)
# This is a scalar. This is also a vector of length 1.
my_scalar <- 13
# This is combining scalars to create a vector with length > 1.
my_vector <- c(13, 52, 44, 60, 29, 48, 57)
# This is to create a numerical sequence.
my_sequential_vector <- 10:17
# This is to create a more complex sequence.
my_next_sequential_vector <- seq(2, 6, by = 0.1)
my_next_sequential_vector
my_sequential_vector
Vector_F <-  c(2:100)
Vector_F
Vector_F <- all(2:100 %% 2) == 0)
Vector_F <- 2:100
Vector_F <- 2:100
Vector_F <- all((Vector_F %% 2) == 0))
even <- 2:100
Vector_F <- all((even %% 2) == 0))
Vector_F <- all((even %% 2) == 0)
Vector_F <- ifelse((even %% 2) ==0)
Vector_F <- ifelse((even %% 2) ==0), "yes"
Vector_F <- ifelse((even %% 2) ==0), "yes", "no"
75 %% 3
75 %% 4
Vector_F <- c(even %% 2 ==0)
Vector_F
Vector_F[1, 2, 3, 4, 5, 6, 7]
Vector_F[1]
even[1]
even[3]
numbers <- 2:100
Vector_F <- c(numbers %% 2 ==0)
Vector_G <- rev(Vector_F)
Vector_G
Vector_H <- c(Vector_F + Vector_G)
Vector_G
Vector_H <- Vector_F + Vector_G
Vector_H
n <- 100
Vector_A <- rnorm(n, 50, 10)
Vector_B <- Vector_A[c(1, 3, 8)]
Vector_C <- Vector_A[c(-10, -15)]
Vector_D <- Vector_A[Vector_A < 40]
Lenght_Vector_D <- length(Vector_D)
positive_Vector_A <- Vector_A[Vector_A >0]
min_max_A <- range(Vector_A)
Vector_E <- sort(Vector_A)
numbers <- 2:100
Vector_F <- c(numbers %% 2 ==0)
Vector_G <- rev(Vector_F)
Vector_H <- Vector_F + Vector_G
# this is interesting. it returns 2 0 2 0 ... which means True+True=2, False+False=0
Vector_A
Vector_E
Vector_F
# We can use the matrix function to create a matrix.
my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
nrow = 3,
ncol = 4)
my_matrix
# Let's remind ourselves about the class and default attributes of a matrix.
class(my_matrix)
attributes(my_matrix)
# If we leave off one dimension, the other will be inferred.
my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
nrow = 3)
my_matrix
my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
ncol = 4)
my_matrix
# We can switch the order of entry by setting byrow to TRUE. If we don't
# use byrow, it is assumed FALSE so that entry is by column.
my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
nrow = 3,
ncol = 4,
byrow = TRUE)
my_matrix
# A matrix can be created by binding columns.
column_1 <- c(15, 22, 25)
column_2 <- c(9, 14, 14)
column_3 <- c(29, 27, 19)
column_4 <- c(13, 21, 10)
my_matrix <- cbind(column_1, column_2, column_3, column_4)
my_matrix
# A matrix can be created by binding rows.
row_1 <- c(15, 9, 29, 13)
row_2 <- c(22, 14, 27, 21)
row_3 <- c(25, 14, 19, 10)
my_matrix <- rbind(row_1, row_2, row_3)
my_matrix
# A matrix can be created by giving a vector dimensions.
my_matrix <- c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10)
dim(my_matrix) <- c(3, 4)
my_matrix
# Rows and columns can be named at the creation of a matrix.
my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
nrow = 3,
ncol = 4,
dimnames = list(c("Row 1", "Row 2", "Row 3"),
c("Col 1", "Col 2", "Col 3", "Col 4")))
my_matrix
# Rows and columns can be named after the matrix is created.
my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
nrow = 3,
ncol = 4)
rownames(my_matrix) <- c("Row 1", "Row 2", "Row 3")
colnames(my_matrix) <- c("Col 1", "Col 2", "Col 3", "Col 4")
my_matrix
# We can also use these functions to dispense with names.
rownames(my_matrix) <- NULL
my_matrix
colnames(my_matrix) <- NULL
my_matrix
# Row and column names can be added all at once with dimnames, just as we
# did it when creating a matrix.
dimnames(my_matrix) <- list(c("Row 1", "Row 2", "Row 3"),
c("Col 1", "Col 2", "Col 3", "Col 4"))
my_matrix
dimnames(my_matrix) <- NULL
my_matrix
my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
nrow = 3,
ncol = 4,
byrow = TRUE)
my_matrix
Matrix_A <- matrix(c(4, 2, 2, 3, 6, 6),
byrow = TRUE)
Matrix_A
Matrix_A <- matrix(c(4, 2, 2, 3, 6, 6),
nrow = 2,
ncol = 2,
byrow = TRUE)
Matrix_A
Matrix_A <- matrix(c(4, 2, 2, 3, 6, 6),
nrow = 3,
ncol = 2,
byrow = TRUE)
Matrix_A
Matrix_B <- matrix(c(7, 3, 2, 5))
Matrix_B
Matrix_B <- matrix(c(7, 3, 2, 5),
byrow = TRUE)
Matrix_B
Matrix_B <- matrix(c(7, 3, 2, 5),
nrow = 2,
ncol = 2,
byrow = TRUE)
Matrix_B
Matrix_C <- matrix(c(8, 5, 1, 1, 3, 4, 1, 7, 2),
nrow = 3,
ncol = 3,
byrow = 2)
Matrix_C
my_value <- Matrix_A[c(1,2)]
my_value
my_value <- Matrix_A[c(1,1)]
my_value
my_value <- Matrix_A[1,2]
my_value
Matrix_D <- Matrix_A[-1,]
Matrix_D
colnames(Matrix_A) <- c("Var_1", "Var_2")
Matrix_A
rownames(Matrix_A) <- c("Bob", "Mary", "Shameka")
Matrix_A
?transpose
??transpose
Matrix_E <- t(Matrix_C)
Matrix_C
Matrix_E
?t
t
Matrix_E
Matrix_E <- Matrix_E + 15
Matrix_E
